#ifndef SKIFF_TYPES_HPP
#define SKIFF_TYPES_HPP

#include "config.hpp"
#include "machine/memory/memman.hpp"
#include <array>
#include <cstdint>
#include <functional>
#include <string>

namespace skiff {
namespace types {

//! \brief Errors that can be thrown at runtime
enum class runtime_error_e {
  RETURN_WITH_EMPTY_CALLSTACK,
  DIVIDE_BY_ZERO,
  ILLEGAL_INSTRUCTION,
  INSTRUCTION_PTR_OUT_OF_RANGE,
  STACK_PUSH_ERROR,
  STACK_POP_ERROR
};

//! \brief Callback that will receive runtime errors
//!        generated by the VM
using runtime_error_cb = std::function<void(runtime_error_e)>;

//! \brief Callback definition for interrupt calls
using interrupt_cb = std::function<bool(const uint64_t)>;

//! \brief Register for vm
using vm_register = uint64_t;

//! \brief Information type passed to system functions
struct view_t {
  std::array<types::vm_register, config::num_integer_registers>
      &integer_registers;
  std::array<types::vm_register, config::num_floating_point_registers>
      &float_registers;
  skiff::machine::memory::memman_c &memory_manager;
  types::vm_register &op_register;
};

} // namespace types
} // namespace skiff

#endif